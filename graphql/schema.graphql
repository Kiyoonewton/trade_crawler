#### queries
type Query {
    oneMatchDay(uuid: ID! @eq): MatchDay @find
    allMatchDay: [MatchDay!]! @all
}

#### mutations
type Mutation {
    createMatchDay(seasonId: ID!): MatchDay
        @field(
            resolver: "App\\GraphQL\\Mutations\\MatchDayMutation@create"
        )
}

#### data types
type MatchDay {
    uuid:ID!
    queryUrl: String!
    doc: [Doc!]!
}

type Doc {
    timestamp: String!
    data: Data!
}

type Data {
    odds: [Odd!]!
}

type Odd {
    id: String!
    sport_id: String!
    tournament_id: String!
    teams: Teams!
    market: [Market!]!
}

type Teams {
    home: Team!
    away: Team!
}

type Team {
    id: String!
    name: String!
    abbr: String!
}

type Market {
    id: Int!
    name: String!
    status: Int!
    outcome: [Outcome!]!
}

type Outcome {
    abbr: String!
    active: Int!
    id: String!
    name: String!
    odds: String!
    result: Int!
}

#### inputs
input CreateMatchDayInput {
    queryUrl: String!
    doc: [DocInput!]!
}

input DocInput {
    timestamp: String!
    data: DataInput!
}

input DataInput {
    odds: [OddInput!]!
}

input OddInput {
    id: String!
    sport_id: String!
    tournament_id: String!
    teams: TeamsInput!
    market: [MarketInput!]!
}

input TeamsInput {
    home: TeamInput!
    away: TeamInput!
}

input TeamInput {
    id: String!
    name: String!
    abbr: String!
}

input MarketInput {
    id: Int!
    name: String!
    status: Int!
    outcome: [OutcomeInput!]!
}

input OutcomeInput {
    abbr: String!
    active: Int!
    id: String!
    name: String!
    odds: String!
    result: Int!
}
